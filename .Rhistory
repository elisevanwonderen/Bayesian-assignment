library(psych)      # for descriptives
library(lattice)    # for xyplot with multiple groups
library(gridExtra)  # for arranging plots in a grid
library(bain)       # for calculating the Bayes Factor
dat <- read.csv("proficiency.csv")
describe(dat) # descriptive statistics
desc_dat <- describe(dat) # descriptive statistics
View(desc_dat)
library(magrittr)
desc_dat %<>%
filter(vars != 1) %>%
select(vars, mean, sd, median, min, max)
library(dplyr)      # for data wrangling
desc_dat %<>%
filter(vars != 1) %>%
select(vars, mean, sd, median, min, max)
print(desc_dat)
desc_dat %<>%
filter(vars != 1) %>%
select(mean, sd, median, min, max)
rownames(desc_dat) <- c("Age (in years)", "SRT score (%)", "Parental education", "Paternal education", "Maternal education")
kable(desc_dat)
library(knitr)      # for table formatting
kable(desc_dat)
kable(desc_dat, digits = 2)
dat$age <- dat$age_mos / 12
View(dat)
dat <- dat[,-2]
dat <- dat[,-1]
write.csv(dat, "proficiency.csv")
dat <- read.csv("proficiency.csv")
View(dat)
dat <- dat[, -1]
?write.csv()
saveRDS(dat, "profiency.rds")
dat <- readRDS("profiency.rds")
View(dat)
dat <- readRDS("profiency.rds")
desc_dat <- describe(dat) # descriptive statistics
desc_dat %<>% select(mean, sd, median, min, max)
rownames(desc_dat) <- c("Age (in years)", "SRT score (%)", "Parental education", "Paternal education", "Maternal education")
kable(desc_dat, digits = 2)
describe(dat)
desc_dat <- describe(dat) # descriptive statistics
desc_dat %<>% select(mean, sd, median, min, max)
rownames(desc_dat) <- c("Age (in years)", "SRT score (%)", "Parental education", "Paternal education", "Maternal education")
kable(desc_dat, digits = 2)
describe(dat)
rownames(desc_dat) <- c("SRT score (%)", "Parental education", "Paternal education", "Maternal education", "Age (in years)")
kable(desc_dat, digits = 2)
kable(desc_dat, digits = 2, caption = "Descriptive statistics of children's characteristics and their score on the Sentence Repetition Task")
kable(desc_dat, digits = 2, caption = "Descriptive statistics of children's age and parental education and their score on the Sentence Repetition Task")
# load custom-made R functions
source("Functions/GibbsSampler.R")
source("Functions/model_results.R")
# center predictors:
dat$c_age_mos <- scale(dat$age_mos, scale = F)
# center predictors:
dat$c_age <- scale(dat$age, scale = F)
dat$c_educ <- scale(dat$educ, scale = F)
dat$c_educ_fat <- scale(dat$educ_fat, scale = F)
dat$c_educ_mot <- scale(dat$educ_mot, scale = F)
# add squared age (for quadratic relationship):
dat$c_age_mos_squared <- dat$c_age_mos^2
# center predictors:
dat$c_age <- scale(dat$age, scale = F)
dat$c_educ <- scale(dat$educ, scale = F)
dat$c_educ_fat <- scale(dat$educ_fat, scale = F)
dat$c_educ_mot <- scale(dat$educ_mot, scale = F)
# add squared age (for quadratic relationship):
dat$c_age_squared <- dat$c_age^2
# set seed for reproducibility
set.seed(123)
# center predictors:
dat$c_age <- scale(dat$age, scale = F)
dat$c_educ <- scale(dat$educ, scale = F)
dat$c_educ_fat <- scale(dat$educ_fat, scale = F)
dat$c_educ_mot <- scale(dat$educ_mot, scale = F)
# add squared age (for quadratic relationship):
dat$c_age_squared <- dat$c_age^2
# set seed for reproducibility
set.seed(123)
# Model 1: SRT ~ age + educ
inits <- list(list(b1 = 1, b2 = 2, var = 200),   # choose reasonable starting values for both chains
list(b1 = 4, b2 = 20, var = 400))
samples1 <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6) # choose a good proposal distribution
# Model 2: SRT ~ age + educ_fat
inits <- list(list(b1 = 1, b2 = 2, var = 200),
list(b1 = 4, b2 = 20, var = 400))
samples2 <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ_fat, inits = inits, m.prop = 12, sd.prop = 4)
# Model 3: SRT ~ age + educ_mot
inits <- list(list(b1 = 1, b2 = 2, var = 200),
list(b1 = 4, b2 = 20, var = 400))
samples3 <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ_mot, inits = inits, m.prop = 5, sd.prop = 5)
# Model 4: SRT ~ age + age^2
inits <- list(list(b1 = 1, b2 = -4, var = 20),
list(b1 = 4, b2 = 0, var = 100))
samples4 <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_age_mos_squared, inits = inits, m.prop = -0.02, sd.prop = 0.005)
t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
pars <- c('b0', 'b1', 'b2', 'var') # save parameter names
t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
results <- t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
View(results)
colnames(results) <- c("Mean", "SD", "MC error", "2.5%",	"50%", "97.5%")
source("Functions/model_results.R")
pars <- c('b0', 'b1', 'b2', 'var') # save parameter names
results <- t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
pars <- c('b0', 'b1', 'b2', 'var') # save parameter names
results <- t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
colnames(results) <- c("Mean", "SD", "MC error", "Lower", "Upper")
kable(results, digits = 2, caption = "Estimates, standard deviations, MC errors and 95% central credibility intervals for the parameter values of Model 1")
# Re-run model 1 with different priors for parental education
inits <- list(list(b1 = 1, b2 = 2, var = 200), list(b1 = 4, b2 = 20, var = 400))
samples1a <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6, mu20 = 0, tau20 = 100)
samples1b <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6, mu20 = 0, tau20 = 25)
samples1c <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6, mu20 = 14, tau20 = 100)
samples1d <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6, mu20 = 14, tau20 = 25)
samples1e <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6, mu20 = 30, tau20 = 100)
samples1f <- myGibbsSampler(dat$SRT, dat$c_age_mos, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6, mu20 = 30, tau20 = 25)
# save samples in a list:
sample_list <- list(samples1a, samples1c, samples1e, samples1b, samples1d, samples1f)
par(mfrow=c(2, 3), mai=c(0.45,0.2,0.45,0.2), omi=c(0.4,0.4,0.2,0.2))
for(i in 1:6){
estimate <- round(mean(sample_list[[i]]$b2), digits = 2)                  # compute mean estimate
lower <- round(quantile(sample_list[[i]]$b2, probs = 0.025), digits = 2)  # lower bound for CCI
upper <- round(quantile(sample_list[[i]]$b2, probs = 0.975), digits = 2)  # upper bound for CCI
hist(sample_list[[i]]$b2, xlab = "", ylab = "", xlim = c(-10,40),         # plot histogram
main = paste(estimate, ", [", lower, ", ", upper, "]", sep = ""),    # put estimate and CCI in title
cex.axis = 1.2, yaxt = 'n')
abline(v = mean(sample_list[[i]]$b2), col = 'blue')                       # plot the mean
segments(y0=-40, x0=quantile(sample_list[[i]]$b2, .025),                  # plot the credible interval
x1=quantile(sample_list[[i]]$b2, .975), col = 'black', lwd = 7, lend =1)
}
mtext("MEAN = 0", side=1, outer=T, at=0.15, font = 2, col = "darkgrey")
mtext("MEAN = 14", side=1, outer=T, at=0.50, font = 2, col = "darkgrey")
mtext("MEAN = 30", side=1, outer=T, at=0.85, font = 2, col = "darkgrey")
mtext("VAR = 100", side=2, outer=T, at=0.75, font = 2, col = "darkgrey")
mtext("VAR = 25", side=2, outer=T, at=0.25, font = 2, col = "darkgrey")
# Compute residuals for the observed dataset for each iteration, using the sampled
# parameter values for b0, b1 and b2:
res.obs <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space
for(i in 1:nrow(samples1)){
res.obs[,i] <- dat$SRT - samples1[i, "b0"] - samples1[i, "b1"]*dat$c_age_mos -
samples1[i, "b2"]*dat$c_educ_fat
}
# Compute residuals for the observed dataset for each iteration, using the sampled
# parameter values for b0, b1 and b2:
res.obs <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space
for(i in 1:nrow(samples1)){
res.obs[,i] <- dat$SRT - samples1[i, "b0"] - samples1[i, "b1"]*dat$c_age - samples1[i, "b2"]*dat$c_educ_fat
}
# Generate new SRT values from a normal distribution based on the sampled parameter values and the observed
# values for the predictors:
repl.data <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space, each column is a new dataset
for(i in 1:nrow(samples1)){
repl.data[,i] <- rnorm(n = nrow(dat), mean = samples1[i, "b0"] + samples1[i, "b1"]*dat$c_age + samples1[i, "b2"]*dat$c_educ_fat,
sd = sqrt(samples1[i, "var"]))
}
# Compute residuals for the replicated datasets:
res.repl <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space
for(i in 1:nrow(samples1)){
res.repl[,i] <- repl.data[,i] - samples1[i, "b0"] - samples1[i, "b1"]*dat$c_age - samples1[i, "b2"]*dat$c_educ_fat
}
# Compute test statistic for the observed data:
diff.obs <- matrix(data = NA, nrow = ncol(res.repl)) # storage space
for(i in 1:ncol(res.obs)){
fitted.values <- dat$SRT - res.obs[,i] # compute fitted values
inds.2 <- which(fitted.values > quantile(fitted.values, probs = 0.333) &
fitted.values < quantile(fitted.values, probs = 0.667)) # indices of second quantile
inds.3 <- which(fitted.values > quantile(fitted.values, probs = 0.667))  # indices of third quantile
diff.obs[i] <- mean(res.obs[inds.3,i]) - mean(res.obs[inds.2,i]) # compute mean difference
}
# Compute test statistic for the replicated data:
diff.repl <- matrix(data = NA, nrow = ncol(res.repl)) # storage space
for(i in 1:ncol(res.repl)){
fitted.values <- repl.data[,i] - res.repl[,i] # compute fitted values
inds.2 <- which(fitted.values > quantile(fitted.values, probs = 0.333) &
fitted.values < quantile(fitted.values, probs = 0.667)) # indices of second quantile
inds.3 <- which(fitted.values > quantile(fitted.values, probs = 0.667))  # indices of third quantile
diff.repl[i] <- mean(res.repl[inds.3,i]) - mean(res.repl[inds.2,i]) # compute mean difference
}
# Posterior predictive p-value:
ppp <- length(which(abs(diff.repl) > abs(diff.obs)))/length(diff.obs)
ppp
length(which(abs(diff.repl) > abs(diff.obs)))/length(diff.obs)
hist(diff.repl, breaks=30, xlim=c(-40,30), col= rgb(0,0,1,0.5),
xlab="mean residual Q3 - mean residual Q2", main="")
hist(diff.obs, breaks=30, xlim=c(-40,30), col= "#ff00ff88", add=T)
legend("topright", legend=c("Replicated","Observed"),
col=c(rgb(0,0,1,0.5), "#ff00ff88"), pt.cex=1.5, pch=15, cex = 0.9)
# Model 1: SRT ~ age + educ
inits <- list(list(b1 = 1, b2 = 2, var = 200),   # choose reasonable starting values for both chains
list(b1 = 4, b2 = 20, var = 400))
samples1 <- myGibbsSampler(dat$SRT, dat$c_age, dat$c_educ, inits = inits, m.prop = 14, sd.prop = 6) # choose a good proposal distribution
# Model 2: SRT ~ age + educ_fat
inits <- list(list(b1 = 1, b2 = 2, var = 200),
list(b1 = 4, b2 = 20, var = 400))
samples2 <- myGibbsSampler(dat$SRT, dat$c_age, dat$c_educ_fat, inits = inits, m.prop = 12, sd.prop = 4)
# Model 3: SRT ~ age + educ_mot
inits <- list(list(b1 = 1, b2 = 2, var = 200),
list(b1 = 4, b2 = 20, var = 400))
samples3 <- myGibbsSampler(dat$SRT, dat$c_age, dat$c_educ_mot, inits = inits, m.prop = 5, sd.prop = 5)
# Model 4: SRT ~ age + age^2
inits <- list(list(b1 = 1, b2 = -4, var = 20),
list(b1 = 4, b2 = 0, var = 100))
samples4 <- myGibbsSampler(dat$SRT, dat$c_age, dat$c_age_squared, inits = inits, m.prop = -0.02, sd.prop = 0.005)
pars <- c('b0', 'b1', 'b2', 'var') # save parameter names
results <- t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
colnames(results) <- c("Mean", "SD", "MC error", "Lower", "Upper")
kable(results, digits = 2, caption = "Estimates, standard deviations, MC errors and 95% central credibility intervals for the parameter values of Model 1")
rownames(results) <- c("Intercept", "Age", "Parental education", "Residual variance")
kable(results, digits = 2, caption = "Estimates, standard deviations, MC errors and 95% central credibility intervals for the parameter values of Model 1")
# Compute residuals for the observed dataset for each iteration, using the sampled
# parameter values for b0, b1 and b2:
res.obs <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space
for(i in 1:nrow(samples1)){
res.obs[,i] <- dat$SRT - samples1[i, "b0"] - samples1[i, "b1"]*dat$c_age - samples1[i, "b2"]*dat$c_educ_fat
}
# Generate new SRT values from a normal distribution based on the sampled parameter values and the observed
# values for the predictors:
repl.data <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space, each column is a new dataset
for(i in 1:nrow(samples1)){
repl.data[,i] <- rnorm(n = nrow(dat), mean = samples1[i, "b0"] + samples1[i, "b1"]*dat$c_age + samples1[i, "b2"]*dat$c_educ_fat,
sd = sqrt(samples1[i, "var"]))
}
# Compute residuals for the replicated datasets:
res.repl <- matrix(data = NA, nrow = nrow(dat), ncol = nrow(samples1)) # storage space
for(i in 1:nrow(samples1)){
res.repl[,i] <- repl.data[,i] - samples1[i, "b0"] - samples1[i, "b1"]*dat$c_age - samples1[i, "b2"]*dat$c_educ_fat
}
# Compute test statistic for the observed data:
diff.obs <- matrix(data = NA, nrow = ncol(res.repl)) # storage space
for(i in 1:ncol(res.obs)){
fitted.values <- dat$SRT - res.obs[,i] # compute fitted values
inds.2 <- which(fitted.values > quantile(fitted.values, probs = 0.333) &
fitted.values < quantile(fitted.values, probs = 0.667)) # indices of second quantile
inds.3 <- which(fitted.values > quantile(fitted.values, probs = 0.667))  # indices of third quantile
diff.obs[i] <- mean(res.obs[inds.3,i]) - mean(res.obs[inds.2,i]) # compute mean difference
}
# Compute test statistic for the replicated data:
diff.repl <- matrix(data = NA, nrow = ncol(res.repl)) # storage space
for(i in 1:ncol(res.repl)){
fitted.values <- repl.data[,i] - res.repl[,i] # compute fitted values
inds.2 <- which(fitted.values > quantile(fitted.values, probs = 0.333) &
fitted.values < quantile(fitted.values, probs = 0.667)) # indices of second quantile
inds.3 <- which(fitted.values > quantile(fitted.values, probs = 0.667))  # indices of third quantile
diff.repl[i] <- mean(res.repl[inds.3,i]) - mean(res.repl[inds.2,i]) # compute mean difference
}
# Posterior predictive p-value:
ppp <- length(which(abs(diff.repl) > abs(diff.obs)))/length(diff.obs)
ppp
hist(diff.repl, breaks=30, xlim=c(-40,30), col= rgb(0,0,1,0.5),
xlab="mean residual Q3 - mean residual Q2", main="")
hist(diff.obs, breaks=30, xlim=c(-40,30), col= "#ff00ff88", add=T)
legend("topright", legend=c("Replicated","Observed"),
col=c(rgb(0,0,1,0.5), "#ff00ff88"), pt.cex=1.5, pch=15, cex = 0.9)
hist(diff.repl, breaks=30, xlim=c(-40,30), col= rgb(0,0,1,0.5),
xlab="mean residual Q3 - mean residual Q2", main="")
hist(diff.obs, breaks=30, xlim=c(-40,30), col= "#ff00ff88", add=T)
legend("topright", legend=c("Replicated","Observed"),
col=c(rgb(0,0,1,0.5), "#ff00ff88"), pt.cex=1.5, pch=15, cex = 0.9)
getDIC(samples1[,pars], dat$SRT, dat$c_age_mos, dat$c_educ)
getDIC(samples1[,pars], dat$SRT, dat$c_age, dat$c_educ)
round(getDIC(samples1[,pars], dat$SRT, dat$c_age, dat$c_educ), digits = 0)
DIC1 <- round(getDIC(samples1[,pars], dat$SRT, dat$c_age, dat$c_educ), digits = 0)
DIC2 <- round(getDIC(samples2[,pars], dat$SRT, dat$c_age, dat$c_educ_fat), digits = 0)
DIC3 <- round(getDIC(samples3[,pars], dat$SRT, dat$c_age, dat$c_educ_mot), digits = 0)
DIC4 <- round(getDIC(samples4[,pars], dat$SRT, dat$c_age, dat$c_age_mos_squared), digits = 0)
DIC <- c(DIC1, DIC2, DIC3, DIC4)
Model <- c("1. Age + parental educ", "2. Age + paternal educ", "3. Age + maternal educ", "4. Age + age squared")
df <- cbind(Model, DIC)
View(df)
kable(df)
t(round(apply(samples4[, pars], 2, get_estimates), digits = 2))
lm(SRT ~age + age_squared, data = dat)
lm(SRT ~ c_age + c_age_squared, data = dat)
summary(lm(SRT ~ c_age + c_age_squared, data = dat))
inits <- list(list(b1 = 1, b2 = -4, var = 20),
list(b1 = 4, b2 = 0, var = 100))
samples4 <- myGibbsSampler(dat$SRT, dat$c_age, dat$c_age_squared, inits = inits, m.prop = -3.77, sd.prop = 0.99)
t(round(apply(samples4[, pars], 2, get_estimates), digits = 2))
DIC4 <- round(getDIC(samples4[,pars], dat$SRT, dat$c_age, dat$c_age_squared), digits = 0)
DIC <- c(DIC1, DIC2, DIC3, DIC4)
Model <- c("1. Age + parental educ", "2. Age + paternal educ", "3. Age + maternal educ", "4. Age + age squared")
df <- cbind(Model, DIC)
kable(df, caption = "DIC per model")
# run regression models with lm():
m1 <- lm(SRT ~ c_age + c_educ, data = dat)
# obtain Bayes Factors for specific hypotheses:
bf1 <- bain(m1, "c_educ > 0.2", standardize = T)
bf2 <- bain(m1, "c_age_mos > 0.2", standardize = T)
# run regression models with lm():
m1 <- lm(SRT ~ c_age + c_educ, data = dat)
# obtain Bayes Factors for specific hypotheses:
bf1 <- bain(m1, "c_educ > 0.2", standardize = T)
bf2 <- bain(m1, "c_age > 0.2", standardize = T)
bf3 <- bain(m1, "c_age > c_educ", standardize = T)
bf1$BFmatrix
View(bf1)
bf1$fit$BF.c
bf1$fit$BF.c[1]
bf2$fit$BF.c[1]
bf3$fit$BF.c[1]
pars <- c('b0', 'b1', 'b2', 'var') # save parameter names
results <- t(round(apply(samples1[, pars], 2, get_estimates), digits = 2))
colnames(results) <- c("Mean", "SD", "MC error", "Lower", "Upper")
rownames(results) <- c("Intercept", "Age", "Parental education", "Residual variance")
kable(results, digits = 2, caption = "Estimates, standard deviations, MC errors and 95% central credibility intervals for the parameter values of Model 1")
results["Age","Mean"]
ppp
mean(diff.obs)
options(scipen = 20)
# turn off scientific notation
options(scipen = 20)
